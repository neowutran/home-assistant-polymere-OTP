'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultImportsChecker;
/* eslint no-extend-native:0 */

require('colors');

var modules = {};
var namespaceImports = [];

if (!String.prototype.startsWith) {
  String.prototype.startsWith = function startWithPolyfill(searchString, p) {
    var position = p || 0;
    return this.indexOf(searchString, position) === position;
  };
}

function runIn(milli, func) {
  var timeoutId = setTimeout(func, milli);
  return function () {
    return clearTimeout(timeoutId);
  };
}

function validateModules() {
  var errors = [];
  Object.keys(modules).map(function (k) {
    return modules[k];
  }).forEach(function (module) {
    module.dependencies.forEach(function (dep) {
      var depModule = modules[dep.filename];
      if (depModule) {
        if (!depModule.exportDefault) {
          var message = [['ERROR : module \''.red, module.name.green, '\' try to use default binding'.red].join(''), [' | of module \''.red, depModule.name.green, ('\' at line [' + dep.line + '] but there is none.').red].join(''), [' | '.red, (dep.line + ' > import ' + dep.variable + ' from \'' + dep.path + '\';').cyan].join(''), [' | You should add a default binding to \''.red, depModule.name.green, '\''.red].join(''), [' | or use the following import :'.red].join(''), [' | '.red, (dep.line + ' > import * as ' + dep.variable + ' from  \'' + dep.path + '\';').cyan].join('')].join('\n');
          if (errors.indexOf(message) < 0) {
            errors.push(message);
          }
        }
      }
    });
  });
  var warnings = [];
  namespaceImports.forEach(function (imprt) {
    var dep = modules[imprt.filename];
    if (dep && dep.exportDefault && !dep.exportOther) {
      var message = [['WARNING : module \''.yellow, imprt.from.green, '\' is using namespace import of module \''.yellow, imprt.filename.green, '\''.yellow].join(''), [(' | at line [' + imprt.line + '] but this module has default export. Maybe it\'s an error.').yellow].join(''), [' | '.yellow, (imprt.line + ' > import * as ' + imprt.variable + ' from \'' + imprt.path + '\';').cyan].join('')].join('\n');
      if (errors.indexOf(message) < 0) {
        warnings.push(message);
      }
    }
  });
  return [errors, warnings];
}

function defaultImportsChecker() {
  var cancel = function cancel() {
    return {};
  };
  var visitor = {
    visitor: {
      Program: {
        enter: function enter(path, parent) {
          // scope
          cancel();
          modules[parent.file.opts.filename] = {
            name: parent.file.opts.filename,
            exportDefault: false,
            exportOther: false,
            dependencies: []
          };
        },
        exit: function exit() {
          // path, parent, scope
          cancel = runIn(100, function () {
            // triggers only on last file
            cancel();

            var _validateModules = validateModules();

            var _validateModules2 = _slicedToArray(_validateModules, 2);

            var errors = _validateModules2[0];
            var warnings = _validateModules2[1];

            if (warnings.length > 0) {
              console.log(warnings.join('\n\n'));
            }
            if (warnings.length > 0 && errors.length > 0) {
              console.log('');
            }
            if (errors.length > 0) {
              console.log(errors.join('\n\n'));
            }
          });
        }
      },
      ExportDefaultDeclaration: function ExportDefaultDeclaration(path, parent) {
        // scope
        // filename : parent.file.opts.filename
        modules[parent.file.opts.filename].exportDefault = true;
      },
      ExportDeclaration: function ExportDeclaration(path, parent) {
        // scope
        // filename : parent.file.opts.filename
        if (String(path.type) !== 'ExportDefaultDeclaration') {
          modules[parent.file.opts.filename].exportOther = true;
        }
      },
      AssignmentExpression: function AssignmentExpression(path, parent) {
        if (String(path.node.left.type) === 'MemberExpression') {
          var _path$node$left = path.node.left;
          var object = _path$node$left.object;
          var property = _path$node$left.property;

          if (object && property && object.name && property.name && object.name === 'module' && (property.name === 'default' || property.name === 'exports')) {
            modules[parent.file.opts.filename].exportDefault = true;
          } else if (object && property && object.name && property.name && object.name === 'exports' && property.name !== 'default') {
            modules[parent.file.opts.filename].exportOther = true;
          }
        }
      },
      ImportDeclaration: function ImportDeclaration(path, parent) {
        // current file : parent.file.opts.filename
        path.node.specifiers.map(function (specifier) {
          // variable name : specifier.local.name
          // relative module : path.node.source.value

          // ImportSpecifier => import { Foo } from './bar';
          // ImportDefaultSpecifier => import Foo from './bar';
          // ImportNamespaceSpecifier => import * as Foo from './bar';

          function extractFilename() {
            var relativePath = path.node.source.value.split('\/');
            var filePath = parent.file.opts.filename.split('\/');
            filePath.pop();
            for (var i in relativePath) {
              var part = relativePath[i];
              if (part === '.') {
                // nothing
              } else if (part === '..') {
                  filePath.pop();
                } else {
                  filePath.push(part);
                }
            }
            return filePath.join('/') + '.js';
          }

          if (String(specifier.type) === 'ImportNamespaceSpecifier' && String(path.node.source.value || '').startsWith('.')) {
            var filename = extractFilename();
            namespaceImports.push({
              from: parent.file.opts.filename,
              filename: filename,
              variable: specifier.local.name,
              path: path.node.source.value,
              line: specifier.loc.start.line
            });
          }
          if (String(specifier.type) === 'ImportDefaultSpecifier' && String(path.node.source.value || '').startsWith('.')) {
            var filename = extractFilename();
            modules[parent.file.opts.filename].dependencies.push({
              filename: filename,
              variable: specifier.local.name,
              path: path.node.source.value,
              line: specifier.loc.start.line
            });
          }
        });
      }
    }
  };
  return visitor;
}